{"ast":null,"code":"var _jsxFileName = \"/home/patthomassoftware/projects/horizon/src/components/PromptBuilder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PromptPiece from './PromptPiece';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateOutput = builderState => {\n  return 'this will be the output';\n};\nconst splitPrompt = rawPrompt => {\n  let splitParts = rawPrompt.split('::');\n  return splitParts.filter(part => {\n    return part.trim() !== '';\n  });\n};\nconst PromptBuilder = ({\n  rawPrompt\n}) => {\n  _s();\n  const [builderState, setBuilderState] = useState({});\n  const promptSplitIntoParts = splitPrompt(rawPrompt);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"promptBuilder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"the raw prompt is: \", rawPrompt]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: promptSplitIntoParts.map((rawPromptPartVal, index) => {\n          return /*#__PURE__*/_jsxDEV(PromptPiece, {\n            rawPromptPart: rawPromptPartVal\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Output: \", generateOutput(builderState)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PromptBuilder, \"an6J1uSJUCdolxt55GKtSKGHXUk=\");\n_c = PromptBuilder;\nexport default PromptBuilder;\nvar _c;\n$RefreshReg$(_c, \"PromptBuilder\");","map":{"version":3,"names":["React","useState","PromptPiece","jsxDEV","_jsxDEV","generateOutput","builderState","splitPrompt","rawPrompt","splitParts","split","filter","part","trim","PromptBuilder","_s","setBuilderState","promptSplitIntoParts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rawPromptPartVal","index","rawPromptPart","_c","$RefreshReg$"],"sources":["/home/patthomassoftware/projects/horizon/src/components/PromptBuilder.tsx"],"sourcesContent":["import React , { ChangeEvent, FC , useState } from 'react';\nimport PromptPiece from './PromptPiece';\n\ninterface PromptBuilderProps {\n  rawPrompt: string\n}\n\nconst generateOutput = (builderState: any) => {\n  return 'this will be the output';\n};\n\nconst splitPrompt = (rawPrompt: string) => {\n  let splitParts = rawPrompt.split('::');\n  return splitParts.filter((part) => {\n    return part.trim() !== '';\n  });\n};\n\nconst PromptBuilder: FC<PromptBuilderProps> = ({\n  rawPrompt\n}) => {\n  const [builderState, setBuilderState] = useState({});\n  const promptSplitIntoParts: string[] = splitPrompt(rawPrompt);\n  return (\n    <div className=\"promptBuilder\">\n      <div>\n        <p>the raw prompt is: {rawPrompt}</p>\n        <div>\n          {promptSplitIntoParts.map((rawPromptPartVal, index) => {\n            return (\n              <PromptPiece key={index} rawPromptPart={rawPromptPartVal} />\n            );\n          })}\n        </div>\n      </div>\n      <div>\n        <p>Output: {generateOutput(builderState)}</p>\n      </div>\n    </div>\n  )\n};\n\nexport default PromptBuilder\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAuBC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMxC,MAAMC,cAAc,GAAIC,YAAiB,IAAK;EAC5C,OAAO,yBAAyB;AAClC,CAAC;AAED,MAAMC,WAAW,GAAIC,SAAiB,IAAK;EACzC,IAAIC,UAAU,GAAGD,SAAS,CAACE,KAAK,CAAC,IAAI,CAAC;EACtC,OAAOD,UAAU,CAACE,MAAM,CAAEC,IAAI,IAAK;IACjC,OAAOA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE;EAC3B,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,aAAqC,GAAGA,CAAC;EAC7CN;AACF,CAAC,KAAK;EAAAO,EAAA;EACJ,MAAM,CAACT,YAAY,EAAEU,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAMgB,oBAA8B,GAAGV,WAAW,CAACC,SAAS,CAAC;EAC7D,oBACEJ,OAAA;IAAKc,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5Bf,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,GAAG,qBAAmB,EAACX,SAAS;MAAA;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCnB,OAAA;QAAAe,QAAA,EACGF,oBAAoB,CAACO,GAAG,CAAC,CAACC,gBAAgB,EAAEC,KAAK,KAAK;UACrD,oBACEtB,OAAA,CAACF,WAAW;YAAayB,aAAa,EAAEF;UAAiB,GAAvCC,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAoC,CAAC;QAEhE,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNnB,OAAA;MAAAe,QAAA,eACEf,OAAA;QAAAe,QAAA,GAAG,UAAQ,EAACd,cAAc,CAACC,YAAY,CAAC;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACR,EAAA,CAtBID,aAAqC;AAAAc,EAAA,GAArCd,aAAqC;AAwB3C,eAAeA,aAAa;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}